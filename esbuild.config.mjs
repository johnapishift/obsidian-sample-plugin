import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
	entryPoints: ["main.ts"],
	bundle: true,
	outfile: "main.js",
	platform: "node",
	format: "cjs",
	target: "es2018",
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	banner: {
		js: banner,
	},
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	minify: prod,
	logLevel: "info",
	// Add the following configurations
	conditions: ["node"],
	loader: {
		".wasm": "file",
	},
	assetNames: "assets/[name]",
	// Add this to your esbuild configuration
	plugins: [
		{
			name: "wasm-fix",
			setup(build) {
				build.onResolve({ filter: /\.wasm$/ }, (args) => {
					return {
						path: args.path,
						namespace: "wasm-binary",
					};
				});

				build.onLoad(
					{ filter: /.*/, namespace: "wasm-binary" },
					async (args) => {
						const wasmPath = path.join(
							__dirname,
							"assets",
							path.basename(args.path)
						);
						const wasmBuffer = await fs.promises.readFile(wasmPath);
						return {
							contents: wasmBuffer,
							loader: "binary",
						};
					}
				);
			},
		},
	],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
	console.log("watching...");
}
